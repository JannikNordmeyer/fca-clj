#+property: header-args :wrap src text
#+property: header-args:text :eval never

* Computing Cores

Consider the following context:


#+RESULTS:
#+begin_src text
          |constant maritime natural running stagnant 
----------+-------------------------------------------
canal     |x        .        .       x       .        
channel   |x        .        .       x       .        
lagoon    |x        x        x       .       x        
lake      |x        .        x       .       x        
maar      |x        .        x       .       x        
pond      |x        .        x       .       x        
pool      |x        .        x       .       x        
puddle    |.        .        x       .       x        
reservoir |x        .        .       .       x        
river     |x        .        x       x       .        
rivulet   |x        .        x       x       .        
runnel    |x        .        x       x       .        
sea       |x        x        x       .       x        
stream    |x        .        x       x       .        
tarn      |x        .        x       .       x        
torrent   |x        .        x       x       .        
trickle   |x        .        x       x       .    
#+end_src    

To compute pq-cores of a context, you may use the ~compute-core~ function:

#+begin_src clojure :exports both
java -jar builds/uberjar/fca-clj-0.1.0-SNAPSHOT-standalone.jar -f compute-core testing-data/bodiesofwater.ctx 3 3
#+end_src

#+RESULTS:
#+begin_src text
        |constant natural running stagnant
--------+----------------------------------
lagoon  |x        x       .       x
lake    |x        x       .       x
maar    |x        x       .       x
pond    |x        x       .       x
pool    |x        x       .       x
river   |x        x       x       .
rivulet |x        x       x       .
runnel  |x        x       x       .
sea     |x        x       .       x
stream  |x        x       x       .
tarn    |x        x       .       x
torrent |x        x       x       .
trickle |x        x       x       .
#+end_src


To discover particular interesting cores we can investigate the sizes of all pq-cores or the concept lattice size of all pq-cores. 
You can use the ~ctx-core-sizes~ and ~core-lattice-sizes~ functions to efficiently compute these sizes.

#+begin_src clojure :exports both
java -jar builds/uberjar/fca-clj-0.1.0-SNAPSHOT-standalone.jar -f ctx-core-sizes testing-data/bodiesofwater.ctx
#+end_src

#+begin_src clojure :exports both
java -jar builds/uberjar/fca-clj-0.1.0-SNAPSHOT-standalone.jar -f core-lattice-sizes testing-data/bodiesofwater.ctx
#+end_src

The large-ctx-lattice-sizes-partial function uses binary search to a p,q value such that the first computed cores lattice sizes (p,1 and 1,q) have maximum value. 
In our exemplary analysis on larger contexts we used a value of 60 which is twice as large as what we considered readable.

#+begin_src clojure :exports both
java -jar builds/uberjar/fca-clj-0.1.0-SNAPSHOT-standalone.jar -f large-ctx-lattice-sizes-partial testing-data/bodiesofwater.ctx 2
#+end_src
